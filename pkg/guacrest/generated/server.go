// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package generated

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Identify the most important dependencies
	// (GET /analysis/dependencies)
	AnalyzeDependencies(w http.ResponseWriter, r *http.Request, params AnalyzeDependenciesParams)
	// Health check the server
	// (GET /healthz)
	HealthCheck(w http.ResponseWriter, r *http.Request)
	// Get all information related to the artifact based on the hash
	// (GET /query/artInfo/{hash})
	GetArtifactInformation(w http.ResponseWriter, r *http.Request, hash string, params GetArtifactInformationParams)
	// Get sbom location related to the artifact based on the hash
	// (GET /query/artInfo/{hash}/sbom)
	GetArtifactSbomInformation(w http.ResponseWriter, r *http.Request, hash string, params GetArtifactSbomInformationParams)
	// Get slsa location related to the artifact based on the hash
	// (GET /query/artInfo/{hash}/slsa)
	GetArtifactSlsaInformation(w http.ResponseWriter, r *http.Request, hash string, params GetArtifactSlsaInformationParams)
	// Get vulnerability information related to the artifact based on the hash
	// (GET /query/artInfo/{hash}/vulns)
	GetArtifactVulnInformation(w http.ResponseWriter, r *http.Request, hash string, params GetArtifactVulnInformationParams)
	// Retrieve the dependencies of a package
	// (GET /query/dependencies)
	RetrieveDependencies(w http.ResponseWriter, r *http.Request, params RetrieveDependenciesParams)
	// Get all information related to the package based on the purl
	// (GET /query/pkgInfo/{purl})
	GetPackageInformation(w http.ResponseWriter, r *http.Request, purl string, params GetPackageInformationParams)
	// Get sbom location related to the package based on the purl
	// (GET /query/pkgInfo/{purl}/sbom)
	GetPackageSbomInformation(w http.ResponseWriter, r *http.Request, purl string, params GetPackageSbomInformationParams)
	// Get slsa location related to the package based on the purl
	// (GET /query/pkgInfo/{purl}/slsa)
	GetPackageSlsaInformation(w http.ResponseWriter, r *http.Request, purl string, params GetPackageSlsaInformationParams)
	// Get vulnerability information related to the package based on the purl
	// (GET /query/pkgInfo/{purl}/vulns)
	GetPackageVulnInformation(w http.ResponseWriter, r *http.Request, purl string, params GetPackageVulnInformationParams)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Identify the most important dependencies
// (GET /analysis/dependencies)
func (_ Unimplemented) AnalyzeDependencies(w http.ResponseWriter, r *http.Request, params AnalyzeDependenciesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Health check the server
// (GET /healthz)
func (_ Unimplemented) HealthCheck(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get all information related to the artifact based on the hash
// (GET /query/artInfo/{hash})
func (_ Unimplemented) GetArtifactInformation(w http.ResponseWriter, r *http.Request, hash string, params GetArtifactInformationParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get sbom location related to the artifact based on the hash
// (GET /query/artInfo/{hash}/sbom)
func (_ Unimplemented) GetArtifactSbomInformation(w http.ResponseWriter, r *http.Request, hash string, params GetArtifactSbomInformationParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get slsa location related to the artifact based on the hash
// (GET /query/artInfo/{hash}/slsa)
func (_ Unimplemented) GetArtifactSlsaInformation(w http.ResponseWriter, r *http.Request, hash string, params GetArtifactSlsaInformationParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get vulnerability information related to the artifact based on the hash
// (GET /query/artInfo/{hash}/vulns)
func (_ Unimplemented) GetArtifactVulnInformation(w http.ResponseWriter, r *http.Request, hash string, params GetArtifactVulnInformationParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Retrieve the dependencies of a package
// (GET /query/dependencies)
func (_ Unimplemented) RetrieveDependencies(w http.ResponseWriter, r *http.Request, params RetrieveDependenciesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get all information related to the package based on the purl
// (GET /query/pkgInfo/{purl})
func (_ Unimplemented) GetPackageInformation(w http.ResponseWriter, r *http.Request, purl string, params GetPackageInformationParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get sbom location related to the package based on the purl
// (GET /query/pkgInfo/{purl}/sbom)
func (_ Unimplemented) GetPackageSbomInformation(w http.ResponseWriter, r *http.Request, purl string, params GetPackageSbomInformationParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get slsa location related to the package based on the purl
// (GET /query/pkgInfo/{purl}/slsa)
func (_ Unimplemented) GetPackageSlsaInformation(w http.ResponseWriter, r *http.Request, purl string, params GetPackageSlsaInformationParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get vulnerability information related to the package based on the purl
// (GET /query/pkgInfo/{purl}/vulns)
func (_ Unimplemented) GetPackageVulnInformation(w http.ResponseWriter, r *http.Request, purl string, params GetPackageVulnInformationParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// AnalyzeDependencies operation middleware
func (siw *ServerInterfaceWrapper) AnalyzeDependencies(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AnalyzeDependenciesParams

	// ------------- Optional query parameter "PaginationSpec" -------------

	err = runtime.BindQueryParameter("form", true, false, "PaginationSpec", r.URL.Query(), &params.PaginationSpec)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "PaginationSpec", Err: err})
		return
	}

	// ------------- Required query parameter "sort" -------------

	if paramValue := r.URL.Query().Get("sort"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "sort"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AnalyzeDependencies(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// HealthCheck operation middleware
func (siw *ServerInterfaceWrapper) HealthCheck(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.HealthCheck(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetArtifactInformation operation middleware
func (siw *ServerInterfaceWrapper) GetArtifactInformation(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "hash" -------------
	var hash string

	err = runtime.BindStyledParameterWithOptions("simple", "hash", chi.URLParam(r, "hash"), &hash, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "hash", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetArtifactInformationParams

	// ------------- Optional query parameter "PaginationSpec" -------------

	err = runtime.BindQueryParameter("form", true, false, "PaginationSpec", r.URL.Query(), &params.PaginationSpec)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "PaginationSpec", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetArtifactInformation(w, r, hash, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetArtifactSbomInformation operation middleware
func (siw *ServerInterfaceWrapper) GetArtifactSbomInformation(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "hash" -------------
	var hash string

	err = runtime.BindStyledParameterWithOptions("simple", "hash", chi.URLParam(r, "hash"), &hash, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "hash", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetArtifactSbomInformationParams

	// ------------- Optional query parameter "PaginationSpec" -------------

	err = runtime.BindQueryParameter("form", true, false, "PaginationSpec", r.URL.Query(), &params.PaginationSpec)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "PaginationSpec", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetArtifactSbomInformation(w, r, hash, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetArtifactSlsaInformation operation middleware
func (siw *ServerInterfaceWrapper) GetArtifactSlsaInformation(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "hash" -------------
	var hash string

	err = runtime.BindStyledParameterWithOptions("simple", "hash", chi.URLParam(r, "hash"), &hash, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "hash", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetArtifactSlsaInformationParams

	// ------------- Optional query parameter "PaginationSpec" -------------

	err = runtime.BindQueryParameter("form", true, false, "PaginationSpec", r.URL.Query(), &params.PaginationSpec)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "PaginationSpec", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetArtifactSlsaInformation(w, r, hash, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetArtifactVulnInformation operation middleware
func (siw *ServerInterfaceWrapper) GetArtifactVulnInformation(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "hash" -------------
	var hash string

	err = runtime.BindStyledParameterWithOptions("simple", "hash", chi.URLParam(r, "hash"), &hash, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "hash", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetArtifactVulnInformationParams

	// ------------- Optional query parameter "PaginationSpec" -------------

	err = runtime.BindQueryParameter("form", true, false, "PaginationSpec", r.URL.Query(), &params.PaginationSpec)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "PaginationSpec", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetArtifactVulnInformation(w, r, hash, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// RetrieveDependencies operation middleware
func (siw *ServerInterfaceWrapper) RetrieveDependencies(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params RetrieveDependenciesParams

	// ------------- Optional query parameter "PaginationSpec" -------------

	err = runtime.BindQueryParameter("form", true, false, "PaginationSpec", r.URL.Query(), &params.PaginationSpec)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "PaginationSpec", Err: err})
		return
	}

	// ------------- Required query parameter "purl" -------------

	if paramValue := r.URL.Query().Get("purl"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "purl"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "purl", r.URL.Query(), &params.Purl)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "purl", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RetrieveDependencies(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetPackageInformation operation middleware
func (siw *ServerInterfaceWrapper) GetPackageInformation(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "purl" -------------
	var purl string

	err = runtime.BindStyledParameterWithOptions("simple", "purl", chi.URLParam(r, "purl"), &purl, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "purl", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPackageInformationParams

	// ------------- Optional query parameter "PaginationSpec" -------------

	err = runtime.BindQueryParameter("form", true, false, "PaginationSpec", r.URL.Query(), &params.PaginationSpec)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "PaginationSpec", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPackageInformation(w, r, purl, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetPackageSbomInformation operation middleware
func (siw *ServerInterfaceWrapper) GetPackageSbomInformation(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "purl" -------------
	var purl string

	err = runtime.BindStyledParameterWithOptions("simple", "purl", chi.URLParam(r, "purl"), &purl, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "purl", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPackageSbomInformationParams

	// ------------- Optional query parameter "PaginationSpec" -------------

	err = runtime.BindQueryParameter("form", true, false, "PaginationSpec", r.URL.Query(), &params.PaginationSpec)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "PaginationSpec", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPackageSbomInformation(w, r, purl, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetPackageSlsaInformation operation middleware
func (siw *ServerInterfaceWrapper) GetPackageSlsaInformation(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "purl" -------------
	var purl string

	err = runtime.BindStyledParameterWithOptions("simple", "purl", chi.URLParam(r, "purl"), &purl, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "purl", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPackageSlsaInformationParams

	// ------------- Optional query parameter "PaginationSpec" -------------

	err = runtime.BindQueryParameter("form", true, false, "PaginationSpec", r.URL.Query(), &params.PaginationSpec)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "PaginationSpec", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPackageSlsaInformation(w, r, purl, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetPackageVulnInformation operation middleware
func (siw *ServerInterfaceWrapper) GetPackageVulnInformation(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "purl" -------------
	var purl string

	err = runtime.BindStyledParameterWithOptions("simple", "purl", chi.URLParam(r, "purl"), &purl, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "purl", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPackageVulnInformationParams

	// ------------- Optional query parameter "PaginationSpec" -------------

	err = runtime.BindQueryParameter("form", true, false, "PaginationSpec", r.URL.Query(), &params.PaginationSpec)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "PaginationSpec", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPackageVulnInformation(w, r, purl, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/analysis/dependencies", wrapper.AnalyzeDependencies)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/healthz", wrapper.HealthCheck)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/query/artInfo/{hash}", wrapper.GetArtifactInformation)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/query/artInfo/{hash}/sbom", wrapper.GetArtifactSbomInformation)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/query/artInfo/{hash}/slsa", wrapper.GetArtifactSlsaInformation)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/query/artInfo/{hash}/vulns", wrapper.GetArtifactVulnInformation)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/query/dependencies", wrapper.RetrieveDependencies)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/query/pkgInfo/{purl}", wrapper.GetPackageInformation)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/query/pkgInfo/{purl}/sbom", wrapper.GetPackageSbomInformation)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/query/pkgInfo/{purl}/slsa", wrapper.GetPackageSlsaInformation)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/query/pkgInfo/{purl}/vulns", wrapper.GetPackageVulnInformation)
	})

	return r
}

type BadGatewayJSONResponse Error

type BadRequestJSONResponse Error

type InfoJSONResponse struct {
	// PaginationInfo Contains the cursor to retrieve more pages. If there are no more,  NextCursor will be nil.
	PaginationInfo  PaginationInfo  `json:"PaginationInfo"`
	SbomList        []Sbom          `json:"SbomList"`
	SlsaList        []Slsa          `json:"SlsaList"`
	Vulnerabilities []Vulnerability `json:"vulnerabilities"`
}

type InternalServerErrorJSONResponse Error

type PurlListJSONResponse struct {
	// PaginationInfo Contains the cursor to retrieve more pages. If there are no more,  NextCursor will be nil.
	PaginationInfo PaginationInfo `json:"PaginationInfo"`
	PurlList       []Purl         `json:"PurlList"`
}

type SbomInfoJSONResponse struct {
	// PaginationInfo Contains the cursor to retrieve more pages. If there are no more,  NextCursor will be nil.
	PaginationInfo PaginationInfo `json:"PaginationInfo"`
	SbomList       []Sbom         `json:"SbomList"`
}

type SlsaInfoJSONResponse struct {
	// PaginationInfo Contains the cursor to retrieve more pages. If there are no more,  NextCursor will be nil.
	PaginationInfo PaginationInfo `json:"PaginationInfo"`
	SlsaList       []Slsa         `json:"SlsaList"`
}

type VulnInfoJSONResponse struct {
	// PaginationInfo Contains the cursor to retrieve more pages. If there are no more,  NextCursor will be nil.
	PaginationInfo  PaginationInfo  `json:"PaginationInfo"`
	Vulnerabilities []Vulnerability `json:"vulnerabilities"`
}

type AnalyzeDependenciesRequestObject struct {
	Params AnalyzeDependenciesParams
}

type AnalyzeDependenciesResponseObject interface {
	VisitAnalyzeDependenciesResponse(w http.ResponseWriter) error
}

type AnalyzeDependencies200JSONResponse struct{ PurlListJSONResponse }

func (response AnalyzeDependencies200JSONResponse) VisitAnalyzeDependenciesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AnalyzeDependencies400JSONResponse struct{ BadRequestJSONResponse }

func (response AnalyzeDependencies400JSONResponse) VisitAnalyzeDependenciesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type AnalyzeDependencies500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response AnalyzeDependencies500JSONResponse) VisitAnalyzeDependenciesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type AnalyzeDependencies502JSONResponse struct{ BadGatewayJSONResponse }

func (response AnalyzeDependencies502JSONResponse) VisitAnalyzeDependenciesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(502)

	return json.NewEncoder(w).Encode(response)
}

type HealthCheckRequestObject struct {
}

type HealthCheckResponseObject interface {
	VisitHealthCheckResponse(w http.ResponseWriter) error
}

type HealthCheck200JSONResponse string

func (response HealthCheck200JSONResponse) VisitHealthCheckResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetArtifactInformationRequestObject struct {
	Hash   string `json:"hash"`
	Params GetArtifactInformationParams
}

type GetArtifactInformationResponseObject interface {
	VisitGetArtifactInformationResponse(w http.ResponseWriter) error
}

type GetArtifactInformation200JSONResponse struct{ InfoJSONResponse }

func (response GetArtifactInformation200JSONResponse) VisitGetArtifactInformationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetArtifactInformation400JSONResponse struct{ BadRequestJSONResponse }

func (response GetArtifactInformation400JSONResponse) VisitGetArtifactInformationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetArtifactInformation500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetArtifactInformation500JSONResponse) VisitGetArtifactInformationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetArtifactInformation502JSONResponse struct{ BadGatewayJSONResponse }

func (response GetArtifactInformation502JSONResponse) VisitGetArtifactInformationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(502)

	return json.NewEncoder(w).Encode(response)
}

type GetArtifactSbomInformationRequestObject struct {
	Hash   string `json:"hash"`
	Params GetArtifactSbomInformationParams
}

type GetArtifactSbomInformationResponseObject interface {
	VisitGetArtifactSbomInformationResponse(w http.ResponseWriter) error
}

type GetArtifactSbomInformation200JSONResponse struct{ SbomInfoJSONResponse }

func (response GetArtifactSbomInformation200JSONResponse) VisitGetArtifactSbomInformationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetArtifactSbomInformation400JSONResponse struct{ BadRequestJSONResponse }

func (response GetArtifactSbomInformation400JSONResponse) VisitGetArtifactSbomInformationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetArtifactSbomInformation500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetArtifactSbomInformation500JSONResponse) VisitGetArtifactSbomInformationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetArtifactSbomInformation502JSONResponse struct{ BadGatewayJSONResponse }

func (response GetArtifactSbomInformation502JSONResponse) VisitGetArtifactSbomInformationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(502)

	return json.NewEncoder(w).Encode(response)
}

type GetArtifactSlsaInformationRequestObject struct {
	Hash   string `json:"hash"`
	Params GetArtifactSlsaInformationParams
}

type GetArtifactSlsaInformationResponseObject interface {
	VisitGetArtifactSlsaInformationResponse(w http.ResponseWriter) error
}

type GetArtifactSlsaInformation200JSONResponse struct{ SlsaInfoJSONResponse }

func (response GetArtifactSlsaInformation200JSONResponse) VisitGetArtifactSlsaInformationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetArtifactSlsaInformation400JSONResponse struct{ BadRequestJSONResponse }

func (response GetArtifactSlsaInformation400JSONResponse) VisitGetArtifactSlsaInformationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetArtifactSlsaInformation500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetArtifactSlsaInformation500JSONResponse) VisitGetArtifactSlsaInformationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetArtifactSlsaInformation502JSONResponse struct{ BadGatewayJSONResponse }

func (response GetArtifactSlsaInformation502JSONResponse) VisitGetArtifactSlsaInformationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(502)

	return json.NewEncoder(w).Encode(response)
}

type GetArtifactVulnInformationRequestObject struct {
	Hash   string `json:"hash"`
	Params GetArtifactVulnInformationParams
}

type GetArtifactVulnInformationResponseObject interface {
	VisitGetArtifactVulnInformationResponse(w http.ResponseWriter) error
}

type GetArtifactVulnInformation200JSONResponse struct{ VulnInfoJSONResponse }

func (response GetArtifactVulnInformation200JSONResponse) VisitGetArtifactVulnInformationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetArtifactVulnInformation400JSONResponse struct{ BadRequestJSONResponse }

func (response GetArtifactVulnInformation400JSONResponse) VisitGetArtifactVulnInformationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetArtifactVulnInformation500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetArtifactVulnInformation500JSONResponse) VisitGetArtifactVulnInformationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetArtifactVulnInformation502JSONResponse struct{ BadGatewayJSONResponse }

func (response GetArtifactVulnInformation502JSONResponse) VisitGetArtifactVulnInformationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(502)

	return json.NewEncoder(w).Encode(response)
}

type RetrieveDependenciesRequestObject struct {
	Params RetrieveDependenciesParams
}

type RetrieveDependenciesResponseObject interface {
	VisitRetrieveDependenciesResponse(w http.ResponseWriter) error
}

type RetrieveDependencies200JSONResponse struct{ PurlListJSONResponse }

func (response RetrieveDependencies200JSONResponse) VisitRetrieveDependenciesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type RetrieveDependencies400JSONResponse struct{ BadRequestJSONResponse }

func (response RetrieveDependencies400JSONResponse) VisitRetrieveDependenciesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type RetrieveDependencies500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response RetrieveDependencies500JSONResponse) VisitRetrieveDependenciesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type RetrieveDependencies502JSONResponse struct{ BadGatewayJSONResponse }

func (response RetrieveDependencies502JSONResponse) VisitRetrieveDependenciesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(502)

	return json.NewEncoder(w).Encode(response)
}

type GetPackageInformationRequestObject struct {
	Purl   string `json:"purl"`
	Params GetPackageInformationParams
}

type GetPackageInformationResponseObject interface {
	VisitGetPackageInformationResponse(w http.ResponseWriter) error
}

type GetPackageInformation200JSONResponse struct{ InfoJSONResponse }

func (response GetPackageInformation200JSONResponse) VisitGetPackageInformationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPackageInformation400JSONResponse struct{ BadRequestJSONResponse }

func (response GetPackageInformation400JSONResponse) VisitGetPackageInformationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetPackageInformation500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetPackageInformation500JSONResponse) VisitGetPackageInformationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetPackageInformation502JSONResponse struct{ BadGatewayJSONResponse }

func (response GetPackageInformation502JSONResponse) VisitGetPackageInformationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(502)

	return json.NewEncoder(w).Encode(response)
}

type GetPackageSbomInformationRequestObject struct {
	Purl   string `json:"purl"`
	Params GetPackageSbomInformationParams
}

type GetPackageSbomInformationResponseObject interface {
	VisitGetPackageSbomInformationResponse(w http.ResponseWriter) error
}

type GetPackageSbomInformation200JSONResponse struct{ SbomInfoJSONResponse }

func (response GetPackageSbomInformation200JSONResponse) VisitGetPackageSbomInformationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPackageSbomInformation400JSONResponse struct{ BadRequestJSONResponse }

func (response GetPackageSbomInformation400JSONResponse) VisitGetPackageSbomInformationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetPackageSbomInformation500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetPackageSbomInformation500JSONResponse) VisitGetPackageSbomInformationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetPackageSbomInformation502JSONResponse struct{ BadGatewayJSONResponse }

func (response GetPackageSbomInformation502JSONResponse) VisitGetPackageSbomInformationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(502)

	return json.NewEncoder(w).Encode(response)
}

type GetPackageSlsaInformationRequestObject struct {
	Purl   string `json:"purl"`
	Params GetPackageSlsaInformationParams
}

type GetPackageSlsaInformationResponseObject interface {
	VisitGetPackageSlsaInformationResponse(w http.ResponseWriter) error
}

type GetPackageSlsaInformation200JSONResponse struct{ SlsaInfoJSONResponse }

func (response GetPackageSlsaInformation200JSONResponse) VisitGetPackageSlsaInformationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPackageSlsaInformation400JSONResponse struct{ BadRequestJSONResponse }

func (response GetPackageSlsaInformation400JSONResponse) VisitGetPackageSlsaInformationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetPackageSlsaInformation500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetPackageSlsaInformation500JSONResponse) VisitGetPackageSlsaInformationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetPackageSlsaInformation502JSONResponse struct{ BadGatewayJSONResponse }

func (response GetPackageSlsaInformation502JSONResponse) VisitGetPackageSlsaInformationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(502)

	return json.NewEncoder(w).Encode(response)
}

type GetPackageVulnInformationRequestObject struct {
	Purl   string `json:"purl"`
	Params GetPackageVulnInformationParams
}

type GetPackageVulnInformationResponseObject interface {
	VisitGetPackageVulnInformationResponse(w http.ResponseWriter) error
}

type GetPackageVulnInformation200JSONResponse struct{ VulnInfoJSONResponse }

func (response GetPackageVulnInformation200JSONResponse) VisitGetPackageVulnInformationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPackageVulnInformation400JSONResponse struct{ BadRequestJSONResponse }

func (response GetPackageVulnInformation400JSONResponse) VisitGetPackageVulnInformationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetPackageVulnInformation500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetPackageVulnInformation500JSONResponse) VisitGetPackageVulnInformationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetPackageVulnInformation502JSONResponse struct{ BadGatewayJSONResponse }

func (response GetPackageVulnInformation502JSONResponse) VisitGetPackageVulnInformationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(502)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Identify the most important dependencies
	// (GET /analysis/dependencies)
	AnalyzeDependencies(ctx context.Context, request AnalyzeDependenciesRequestObject) (AnalyzeDependenciesResponseObject, error)
	// Health check the server
	// (GET /healthz)
	HealthCheck(ctx context.Context, request HealthCheckRequestObject) (HealthCheckResponseObject, error)
	// Get all information related to the artifact based on the hash
	// (GET /query/artInfo/{hash})
	GetArtifactInformation(ctx context.Context, request GetArtifactInformationRequestObject) (GetArtifactInformationResponseObject, error)
	// Get sbom location related to the artifact based on the hash
	// (GET /query/artInfo/{hash}/sbom)
	GetArtifactSbomInformation(ctx context.Context, request GetArtifactSbomInformationRequestObject) (GetArtifactSbomInformationResponseObject, error)
	// Get slsa location related to the artifact based on the hash
	// (GET /query/artInfo/{hash}/slsa)
	GetArtifactSlsaInformation(ctx context.Context, request GetArtifactSlsaInformationRequestObject) (GetArtifactSlsaInformationResponseObject, error)
	// Get vulnerability information related to the artifact based on the hash
	// (GET /query/artInfo/{hash}/vulns)
	GetArtifactVulnInformation(ctx context.Context, request GetArtifactVulnInformationRequestObject) (GetArtifactVulnInformationResponseObject, error)
	// Retrieve the dependencies of a package
	// (GET /query/dependencies)
	RetrieveDependencies(ctx context.Context, request RetrieveDependenciesRequestObject) (RetrieveDependenciesResponseObject, error)
	// Get all information related to the package based on the purl
	// (GET /query/pkgInfo/{purl})
	GetPackageInformation(ctx context.Context, request GetPackageInformationRequestObject) (GetPackageInformationResponseObject, error)
	// Get sbom location related to the package based on the purl
	// (GET /query/pkgInfo/{purl}/sbom)
	GetPackageSbomInformation(ctx context.Context, request GetPackageSbomInformationRequestObject) (GetPackageSbomInformationResponseObject, error)
	// Get slsa location related to the package based on the purl
	// (GET /query/pkgInfo/{purl}/slsa)
	GetPackageSlsaInformation(ctx context.Context, request GetPackageSlsaInformationRequestObject) (GetPackageSlsaInformationResponseObject, error)
	// Get vulnerability information related to the package based on the purl
	// (GET /query/pkgInfo/{purl}/vulns)
	GetPackageVulnInformation(ctx context.Context, request GetPackageVulnInformationRequestObject) (GetPackageVulnInformationResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// AnalyzeDependencies operation middleware
func (sh *strictHandler) AnalyzeDependencies(w http.ResponseWriter, r *http.Request, params AnalyzeDependenciesParams) {
	var request AnalyzeDependenciesRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AnalyzeDependencies(ctx, request.(AnalyzeDependenciesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AnalyzeDependencies")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AnalyzeDependenciesResponseObject); ok {
		if err := validResponse.VisitAnalyzeDependenciesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// HealthCheck operation middleware
func (sh *strictHandler) HealthCheck(w http.ResponseWriter, r *http.Request) {
	var request HealthCheckRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.HealthCheck(ctx, request.(HealthCheckRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "HealthCheck")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(HealthCheckResponseObject); ok {
		if err := validResponse.VisitHealthCheckResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetArtifactInformation operation middleware
func (sh *strictHandler) GetArtifactInformation(w http.ResponseWriter, r *http.Request, hash string, params GetArtifactInformationParams) {
	var request GetArtifactInformationRequestObject

	request.Hash = hash
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetArtifactInformation(ctx, request.(GetArtifactInformationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetArtifactInformation")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetArtifactInformationResponseObject); ok {
		if err := validResponse.VisitGetArtifactInformationResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetArtifactSbomInformation operation middleware
func (sh *strictHandler) GetArtifactSbomInformation(w http.ResponseWriter, r *http.Request, hash string, params GetArtifactSbomInformationParams) {
	var request GetArtifactSbomInformationRequestObject

	request.Hash = hash
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetArtifactSbomInformation(ctx, request.(GetArtifactSbomInformationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetArtifactSbomInformation")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetArtifactSbomInformationResponseObject); ok {
		if err := validResponse.VisitGetArtifactSbomInformationResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetArtifactSlsaInformation operation middleware
func (sh *strictHandler) GetArtifactSlsaInformation(w http.ResponseWriter, r *http.Request, hash string, params GetArtifactSlsaInformationParams) {
	var request GetArtifactSlsaInformationRequestObject

	request.Hash = hash
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetArtifactSlsaInformation(ctx, request.(GetArtifactSlsaInformationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetArtifactSlsaInformation")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetArtifactSlsaInformationResponseObject); ok {
		if err := validResponse.VisitGetArtifactSlsaInformationResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetArtifactVulnInformation operation middleware
func (sh *strictHandler) GetArtifactVulnInformation(w http.ResponseWriter, r *http.Request, hash string, params GetArtifactVulnInformationParams) {
	var request GetArtifactVulnInformationRequestObject

	request.Hash = hash
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetArtifactVulnInformation(ctx, request.(GetArtifactVulnInformationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetArtifactVulnInformation")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetArtifactVulnInformationResponseObject); ok {
		if err := validResponse.VisitGetArtifactVulnInformationResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// RetrieveDependencies operation middleware
func (sh *strictHandler) RetrieveDependencies(w http.ResponseWriter, r *http.Request, params RetrieveDependenciesParams) {
	var request RetrieveDependenciesRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.RetrieveDependencies(ctx, request.(RetrieveDependenciesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RetrieveDependencies")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(RetrieveDependenciesResponseObject); ok {
		if err := validResponse.VisitRetrieveDependenciesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPackageInformation operation middleware
func (sh *strictHandler) GetPackageInformation(w http.ResponseWriter, r *http.Request, purl string, params GetPackageInformationParams) {
	var request GetPackageInformationRequestObject

	request.Purl = purl
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetPackageInformation(ctx, request.(GetPackageInformationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPackageInformation")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetPackageInformationResponseObject); ok {
		if err := validResponse.VisitGetPackageInformationResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPackageSbomInformation operation middleware
func (sh *strictHandler) GetPackageSbomInformation(w http.ResponseWriter, r *http.Request, purl string, params GetPackageSbomInformationParams) {
	var request GetPackageSbomInformationRequestObject

	request.Purl = purl
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetPackageSbomInformation(ctx, request.(GetPackageSbomInformationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPackageSbomInformation")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetPackageSbomInformationResponseObject); ok {
		if err := validResponse.VisitGetPackageSbomInformationResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPackageSlsaInformation operation middleware
func (sh *strictHandler) GetPackageSlsaInformation(w http.ResponseWriter, r *http.Request, purl string, params GetPackageSlsaInformationParams) {
	var request GetPackageSlsaInformationRequestObject

	request.Purl = purl
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetPackageSlsaInformation(ctx, request.(GetPackageSlsaInformationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPackageSlsaInformation")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetPackageSlsaInformationResponseObject); ok {
		if err := validResponse.VisitGetPackageSlsaInformationResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPackageVulnInformation operation middleware
func (sh *strictHandler) GetPackageVulnInformation(w http.ResponseWriter, r *http.Request, purl string, params GetPackageVulnInformationParams) {
	var request GetPackageVulnInformationRequestObject

	request.Purl = purl
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetPackageVulnInformation(ctx, request.(GetPackageVulnInformationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPackageVulnInformation")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetPackageVulnInformationResponseObject); ok {
		if err := validResponse.VisitGetPackageVulnInformationResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
