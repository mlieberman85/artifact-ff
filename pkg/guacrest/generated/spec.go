// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RXTW/bRhP+K4N9X8BAwVpG2l58S9w2DdAPIwp6SXIYkSNx4+UuM7u0qxj878UuuRQp",
	"Uxad2o4/bhK5MzvzzDPDZy5FaorSaNLOiuNLUSJjQY44/DvFldTopNHzklL/JCObsiz9I3Es3uUEZXcG",
	"UqOXclVx829pGFxO8LkiXh9+0ADfwcEprmguv9AB2JJSuZRkwyFdFQtiMEtgspVyFphcxZqy1vCkYmv4",
	"AOTmDSzWUDKdS1NZSFEpC6iznuOLHJ2Pj8CZ1uqDFomQPvYQlkiExoLE8XaqibBpTgUGTNiUxE5SwKQJ",
	"xP9y69JbWsdSr0SdiJhc76XUjlbEoq6T+MgsPlHqRO0fMdnSaNt4foXZa3R0gWv/LzXakXb+J5alkmkI",
	"bvbJeuQve+H9n2kpjsX/ZptKzpq3dvYLs+HmqquVs8TnxEA6NZV2xJQBaiBv4kupKXVSrzx2vkIZOoQF",
	"pmekM5/sK8ze0ueKrLv7aF9hBtxcloCt0hzQwpJNAVKfo5IZGIZCWuvj7VG4TsQbvTQ3CnBY7Q0toqPr",
	"Etg6XSdivjDF77LBSDoq7D4X3kBsyILMuA6OlMWbOVIWxxydV0oT40IqGZOc5O/vnt36quNA5s+VZMrE",
	"8ftt3K5e24Oml9zH0S4ZkmFRqTOQemm4CBc0VXbEGtU8ULrh0Z2zMl4Kza3QHkzEacUq1uob8a4fwqTy",
	"eoObV7W7ZkrhXoKS1vkZX1asbGyPp9Gh+5DqrpmClF2YApRJO377BvnWON3OANqL001GgVUWBzj5IfWN",
	"cXog83UKfL4Nh5O0jronhNvN0SFCf5C1uKIRCbQVZDx4NZZkBOZhbCdGO5S6UYdp0FytimNJ5wSF4aA9",
	"yR7Cm6U/xQTIBNqEdwnAn/SPa9QaXEilYEGgpToMEnCY0ebkqK57ZxyqEy+Spim7Zi6OugrDY/SF75ax",
	"F0NejGBee0HrIdSVUokwJWkspTgWPxweHR75XNHlIc0ZalRrK+0so5J0RjptAVhRSM1j0tQk8/Pan/5C",
	"P/fPJoMN4f04pTdHZluyuk7GVghr2IHhrFkAXFgq0jNf21b8L4P40+n6AL6Hd733cCFdHixyucrJut4i",
	"EXN00YtNDVOKnO32osyFd/JXSXo+/xU6i+bXzuXBJyD63HdcUX+FIF0VviO6RMKC0Trv9UdX1I9bu8GL",
	"o6NdA6Q7N+u+xnUifpxi0NPwdSJ+mmIyprSC7YtJ18UFJ0yaqiiQ115J+TLJ5TrUoDDWgSxKww61gwFV",
	"vdksJ1Qu/7KTt7+F9yc5pWdiHMbJn4aRXtvWgJm3brfYdqOSFpoYt/NsIoPUh9YzaNIKnJohOz8QZ5c5",
	"2rzemeNrci/ZySWm4Xgc4LfenqG10OaxMbG9NDaCny2bPvAnr+2DW6F5/NI+Koq/JgeoBp9bYFLoKIsb",
	"dsQWFmgpA6Mhor+bIDPbflD2sSQq7WfFlG69eIxsGSwBt8OVVmPs5Uq7bTwvrsQV61Fypb8I3QpX/D5h",
	"p5AlrlzPiizdnvkYydJfFdf//YM0aZd42+5td7tMhNXBL7UtVboVIEr9Hfrd29w9aR6tPI/FG2DqK+hx",
	"xg7bHifKs1UzTDyy16rY08b4zidInxYhxm1KDMfI/TDiqSrZFtrh3AiQ7uTIXiHbEuVedOyDJMvTFbNf",
	"RZc9WjbS5T6k7MOky5PVs19Dl71ytuXLvajZB8mX5yFpr+NOXf8bAAD//4S5RtkOIwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
