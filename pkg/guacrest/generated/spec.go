// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RYTW/cNhP+KwO+L2CgUL1G2l58i902DdAPIxv0kuQwK82uGFOkQlJ2N4b+ezGUqJXW",
	"Wq+c2k5s37wSZzgfz4yex1ciNUVpNGnvxPGVKNFiQZ5s+HWGK6nRS6PnJaX8JCOXWlnyI3Es3uYEZXcG",
	"UqOXclXZ5tfSWPA5waeK7PrwvQb4Dg7OcEVz+ZkOwJWUyqUkFw7pqliQBbMES65S3oElX1lNWWt4Wlln",
	"7AHIzRtYrKG0dCFN5SBFpRygznqOL3P0HB+BN63Vey0SITn2EJZIhMaCxPF2qolwaU4FhppYU5L1kkJN",
	"mkD4L78u2dJ5K/VK1ImIyfVeSu1pRVbUdRIfmcVHSr2o+ZElVxrtGs8nmL1CT5e45l+p0Z605z+xLJVM",
	"Q3Czj44rf9UL7/+WluJY/G+26eSseetmv1hrbHPV9c45shdkgXRqKu3JUgaogdiEW6kp9VKvuHbcoQw9",
	"wgLTc9IZJ3uC2Rv6VJHz9x/tCWZgm8sScFWaAzpYWlOA1BeoZAbGQiGd43h7EK4T8Vovza0CHHZ7A4vo",
	"6KYEtk7XiZgvTPG7bGokPRVunws2EBuwoLW4Do6Uw9s5Ug7HHKWc3HJ9gpmb7Ou0sxnzeFEpTRYXUslY",
	"tkle/+7Zra87DuPxqZKWMnH8brsTw0SuB9Erfa94H0ancAi2RaXOQeqlsUW4rkGRJ6tRzcPINDi9d9TH",
	"S6G5FdqDiTirrIpY+Eq47ocwqdlscPsed9dMadxLUNJ5/oaUlVUujt/T2AD7KtVdM6VSbmEKUCbt8M0D",
	"8rXrdDcLbm+dbrMKnHI4qBOvrK9cpyezv69v7H5qU9rDYz7c1HXkbQ1V26Q9Rte6NT5s0B/kHK5oxGQr",
	"o3jweqjJSJeHoZ8a7VHqhvymgVK2JNVKuiAojA3UmtwhvF7yKUuAlkCb8C4B+JP+8Q0ZhUupFCwItFSH",
	"geEOM9qcHK3DW+NRnTIHnEZcm7U86irsrtEXPKxjL4YgGql5zXydS6grpRJhStJYSnEsfjg8OjziXNHn",
	"Ic0ZalRrJ90so5J0RjptC7CikBrXpOlJxp8LPv2Zfu6fTQYC6N04/jdHZluqoU7GFJIz1oOxWaNvfNBM",
	"6Tn3ttU2y8Btdbo+gO/hbe89XEqfB4tcrnJyvqeTYo4+enGpsZSizXZ7UeaSnfxVkp7Pf4XOovlrpzbi",
	"BEQf+95W1FdIpKuCJ6JLJOin1nlvPrqmftiSPi+OjnZtm+7crCMDdSJ+nGLQkyh1In6aYjJG9ILti0nX",
	"Rf0WFlFVFGjXTOS4TXK5Dj0ojPMgi9JYj9rDAKpsNssJlc8/78Ttb+H9aU7puRgv4+Qv08isbVPQjK1b",
	"kd4KRumgiXE7zyYySDm0nkGTVsDUDK3nhTi7ytHl9c4cX5F/ybsb03A87vc7H88wWujyOJjYXhoHgXfL",
	"Zg745I1zcCcwjx/6RwXxV+QB1eBrDJYUesriPxBibWGBjjIwGmL1dwNk5toPyj6URKL/rJDSqZvHiJaB",
	"BrkbrLQcYy9WWrHzvLASFd6jxEpfh90JVlh8uClgiYrvWYGlk7mPESx9Xbn+7x+kSVriTavb7ldMBOnA",
	"mreFSicBItXfwd/Z5v5B82jpeWzeoKbcQa4zdrXtYaI8XzXLhCt7I4s9a4zvfYP0YRFi3IbEcI08DCKe",
	"KpNtSzvcG6GkOzGyl8i2QHkQHvtNguXpktkvgsseLhvh8hBU9tuEy5Pls18Cl710tsXLg7DZbxIvz4PS",
	"3oSduv43AAD//2sSxmrtIwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
