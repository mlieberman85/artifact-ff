// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RYTW/kNg/+K4TeFwhQuJlg217m1qRtGqAfwU7Qy+4eNDJnrI0sOZScdBL4vxeUP8ae",
	"eDbOIkGa5mZbJEU+fCiRvhPK5YWzaIMX8ztRSJI5BqT4di7X2sqgnV0UqPhLil6RLviTmIuLDKHoZEA5",
	"u9Lrkuq3lSMIGcJVibQ5/GgBvoGDc7nGhb7FA/AFKr3S6KOQLfMlErgVEPrSBA+EoSSLaaN4UpJ3dAB6",
	"uwLLDRSE19qVHpQ0xoO0ac/wTSYD+4cQXKP10YpEaPY9uiUSYWWOYr4baiK8yjCXERNyBVLQGDGpHeGn",
	"sClY0wfSdi2qRLTB9Ra1DbhGElWVtJ/c8jOqICr+ROgLZ31t+VimpzLgjdzwm3I2oA38KIvCaBWdm332",
	"jPxdz73/E67EXPxvts3krF71s5+JHNVb3c+cR7pGArTKlTYgYQrSArIKp9KiCtquGTvOUCqDhKVUl2hT",
	"DvZYpu/xqkQfnt/bY5kC1Zsl4EuVgfSwIpeDttfS6BQcQa69Z397FK4SccaRWWkWMdh6h2f3t90U6l2h",
	"EUzEeUnmzK7co1wY8m9L1NbQl1zcka4SsVi6/DddZ00HzP1DJlhBbOkrieQmGjJePs6Q8XLM0HVpLJJc",
	"aqPbICfZ+6unt7lvOJbXVakJUzH/sIvb/W170PSC+zRat8N0FyUZ0HblKI8btJlu0XmhTPddmAQoKzwe",
	"x26bKVD9CEb7wOc8g+ZbQv43auIhpLptpiDlly4H41THKKbkS+P0NCX/IE6PKT5vvBzgxMfCC+P0LznR",
	"vu7sqtreJ7rb3ZhDhH5H7+UaR9qgHSdbwfu+JCMwD307cTZIbesOUcW+q+nkSOM1Qu4o9p/oD+FsxVKE",
	"IAnBuriWAPyBf4e6Y4MbbQwsEaw2h7ENHEa0lRzt7S5ckOaEG6Vp3V19Lo6aiofH6AJXy9jCkBcjmFfc",
	"1DKEtjQmEa5AKwst5uK7w6PDI45VhiyGOZNWmo3XfpZigTZFqxoA1hhDY0zqnKR8XrP0Lf7Ul00GU8KH",
	"cUpvRWY7rXWVjI0R3lEAR2k9BIQ4WKhLzm0zAKxiA2jV5gC+hYveOtzokEWNTK8z9KE3TLQxhtaKV45Q",
	"SUr3WzHuho38WaBdLH6BTqN+2jtAcACiz/1AJfbHCLRlzhXRBRKHjMZ4rz66pH7amQ/eHR3tO0A6uVl3",
	"G1eJ+H6KQq+PrxLxwxSVsZ466r6btF075MSTpsxzSRvumTlNerWJOcidD6DzwlGQNsCAqqw2y1CakN3u",
	"5e2vcf0kQ3UpxmGcfDWM1Nput5+ydjPJNlOV9lD7uBtn7Rkodq2nUIcVOTWtMt83p+DzlmYsRL4imqLs",
	"CqotnD3VwDpfrIa3TfY2eQNMOYOMs+yw7XGiuFzzJTm7Y2Srvaw4xXBeK5/17vRnp0X0cZcSfOe8BCPa",
	"LuxVMeIUA0gzaMWA0MiAafsHpoEXltJjCs5Cm4X9PJn5ptd4gCztDPb2CNNNn6+RMIMZ8Uno0nSgD9Gl",
	"GUXfIF3aIfxV0qU/Kj8FXXjg9BP40o7kb48v3c+I18iX/v+EzdfeTFX1TwAAAP//gI8FKGQaAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
